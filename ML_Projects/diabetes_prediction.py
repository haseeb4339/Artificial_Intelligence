# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18YxM2TeyKWAt_-U_ai_9p7bF6lkxr4mb
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""**Load Data**"""

df = pd.read_csv("/content/diabetes.csv")

df.head(2)

df.shape

"""**Statistical Measure**"""

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

X = df.drop(columns='Outcome', axis=1)
Y = df['Outcome']

print(X)
print(Y)

"""**Data Standardization**"""

scaler = StandardScaler()

scaler.fit(X)

standardize_data = scaler.transform(X)   # it will standardize the data into a same range

print(standardize_data)

X = standardize_data

"""**split the data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2, stratify=Y)

"""**Model Training**"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""**Model Evaluation**"""

#accuracy score
X_train_prediction = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print(f'Accuracy score of training data: {X_train_accuracy}')

X_test_prediction = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print(f'Accuracy score of training data: {X_test_accuracy}')

